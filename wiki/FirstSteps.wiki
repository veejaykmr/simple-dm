#summary SDM installation and sample module launching

<wiki:toc />

= Download and setup =
  # SDM requires Java 1.5+
  # Download the SDM distribution [http://simple-dm.googlecode.com/files/sdm-0.2.zip sdm-0.2.zip]. The archive contains the SDM core and dependencies.
  # Unzip the archive.

= Setup the SDM remote maven repository =
SDM uses Groovy Grape and Ivy internally to resolve and download module dependencies from repositories.

You need to create/update the *~/.groovy/grapeConfig.xml* file like this:
{{{
<ivysettings>
  <settings defaultResolver="downloadGrapes"/>
  <resolvers>
    <chain name="downloadGrapes">     

      <filesystem name="cachedGrapes">
        <ivy pattern="${user.home}/.groovy/grapes/[organisation]/[module]/ivy-[revision].xml"/>
        <artifact pattern="${user.home}/.groovy/grapes/[organisation]/[module]/[type]s/[artifact]-[revision].[ext]"/>
      </filesystem>

      <ibiblio name="local" root="file:${user.home}/.m2/repository/" m2compatible="true"/>
      <ibiblio name="sdm" root="http://simple-dm.googlecode.com/svn/repository/" m2compatible="true" />

      <!-- todo add 'endorsed groovy extensions' resolver here -->
      <ibiblio name="codehaus" root="http://repository.codehaus.org/" m2compatible="true" />
      <ibiblio name="ibiblio" m2compatible="true" />
      <ibiblio name="java.net2" root="http://download.java.net/maven/2/" m2compatible="true" />
     
    </chain>
  </resolvers>
</ivysettings>
}}}

The following line adds the SDM maven repository to the resolver chain. This is needed to launch the demo.

{{{
<ibiblio name="sdm" root="http://simple-dm.googlecode.com/svn/repository/" m2compatible="true" />
}}}

The *testapp* application module should now run without any problems.

= Sample application module test=  
== Launch the SDM runtime ==
Go to the directory where you unzipped the SDM distribution.
Launch the following java command:
{{{
java -jar sdm-core-0.2.jar
}}}

Or if you are behind a proxy:
{{{
java -Dhttp.proxyHost=yourproxy -Dhttp.proxyPort=8080 -jar sdm-core-0.2.jar
}}}
*Warn*:
 Launching SDM for the first time can take a while because of the downloading (and caching) of all required dependencies.

When prompting, type:
{{{
start org.sdm:testapp:0.2
}}}
The command will automatically resolve and download all module dependencies, then start the testapp module by calling the *start* module life cycle method.

== List the loaded modules ==

To see all loaded modules, type the *list* command:
{{{
list
org.sdm:core:0.2 (0 classes)
org.sdm:cxf:0.2 (1 classes)
org.codehaus.groovy:groovy-all:1.7.2 (0 classes)
org.sdm:http:0.2 (1 classes)
org.mortbay.jetty:jetty:6.1.21 (69 classes)
org.mortbay.jetty:jetty-util:6.1.21 (34 classes)
org.apache.geronimo.specs:geronimo-servlet_2.5_spec:1.2 (12 classes)
org.springframework:spring-context:2.5.6 (58 classes)
org.springframework:spring-beans:2.5.6 (179 classes)
org.springframework:spring-core:2.5.6 (63 classes)
commons-logging:commons-logging:1.1.1 (17 classes)
commons-logging:commons-logging-api:1.1 (12 classes)
org.apache.cxf:cxf-rt-core:2.2.6 (79 classes)
org.apache.cxf:cxf-common-utilities:2.2.6 (48 classes)
org.apache.cxf:cxf-api:2.2.6 (122 classes)
org.apache.cxf:cxf-rt-frontend-jaxrs:2.2.6 (77 classes)
javax.ws.rs:jsr311-api:1.0 (40 classes)
org.codehaus.woodstox:wstx-asl:3.2.9 (86 classes)
org.apache.camel:camel-cxf:2.2.0 (19 classes)
org.apache.cxf:cxf-rt-bindings-xml:2.2.6 (6 classes)
org.apache.cxf:cxf-rt-transports-http:2.2.6 (17 classes)
org.apache.cxf:cxf-rt-frontend-jaxws:2.2.6 (2 classes)
org.apache.cxf:cxf-rt-bindings-soap:2.2.6 (8 classes)
org.apache.cxf:cxf-rt-ws-addr:2.2.6 (13 classes)
org.apache.cxf:cxf-rt-transports-http-jetty:2.2.6 (9 classes)
wsdl4j:wsdl4j:1.6.2 (102 classes)
com.sun.xml.bind:jaxb-impl:2.1.12 (289 classes)
xml-resolver:xml-resolver:1.2 (13 classes)
org.apache.neethi:neethi:2.0.4 (2 classes)
org.mortbay.jetty:jetty:6.1.22 (0 classes)
org.apache.camel:camel-spring:2.2.0 (6 classes)
org.apache.camel:camel-core:2.2.0 (393 classes)
org.fusesource.commonman:commons-management:1.0 (4 classes)
org.springframework:spring-aop:2.5.6 (5 classes)
org.apache.camel:camel-http:2.2.0 (21 classes)
org.apache.geronimo.specs:geronimo-servlet_2.4_spec:1.1.1 (9 classes)
commons-httpclient:commons-httpclient:3.1 (1 classes)
org.apache.cxf:cxf-rt-frontend-simple:2.2.6 (1 classes)
org.sdm:testapp:0.2 (5 classes)
}}}

== See the result ==
The *testapp* module simply exposes a hello world application service using apache camel, cxf and jetty http technical services.

To test it just type this URL in your browser:
{{{
http://localhost:8088/services/helloworld
}}}

= Development stage =
It is very easy to develop a module with SDM. Modules can be restarted dynamically from repositories or from the development workspace.

== Restart command ==

You can simply reload a module by typing the restart command. For example:
{{{
restart org.sdm:testapp:0.2
}}}

== Workspace integration ==
Your can tell SDM to (re)load a module directly from your development workspace.
Edit the *$SDM_DIST/lib/sdm-config.groovy* file to declare where the module artifacts are located on the filesystem.

{{{
configuration { 
  project(module: 'org.sdm:testapp:0.2') {
    src(path: '/home/alex/projects/simple-dm/testapp/target/classes')
  }
}
}}}

You can use multiple *src* definitions, if the module artifacts are split on multiple locations. 

SDM will detect modifications made to the module and reload it *automatically*. 