#summary SDM installation and sample module launching

<wiki:toc />

= Download and setup =
  # Download the SDM distribution [http://simple-dm.googlecode.com/files/sdm-dist-0.1.zip here]. The archive contains the SDM core and dependencies.
  # Unzip the archive.

= Setup the SDM remote maven repository =
SDM uses Groovy Grape and Ivy internally to resolve and download module dependencies from repositories.

You need to create/update the *~/.groovy/grapeConfig.xml* file like this:
{{{
<ivysettings>
  <settings defaultResolver="downloadGrapes"/>
  <resolvers>
    <chain name="downloadGrapes">     

      <filesystem name="cachedGrapes">
        <ivy pattern="${user.home}/.groovy/grapes/[organisation]/[module]/ivy-[revision].xml"/>
        <artifact pattern="${user.home}/.groovy/grapes/[organisation]/[module]/[type]s/[artifact]-[revision].[ext]"/>
      </filesystem>

      <ibiblio name="local" root="file:${user.home}/.m2/repository/" m2compatible="true"/>
      <ibiblio name="sdm" root="http://simple-dm.googlecode.com/svn/repository/" m2compatible="true" />

      <!-- todo add 'endorsed groovy extensions' resolver here -->
      <ibiblio name="codehaus" root="http://repository.codehaus.org/" m2compatible="true" />
      <ibiblio name="ibiblio" m2compatible="true" />
      <ibiblio name="java.net2" root="http://download.java.net/maven/2/" m2compatible="true" />
     
    </chain>
  </resolvers>
</ivysettings>
}}}

The following line adds the SDM maven repository to the resolver chain. This is needed to launch the demo.

{{{
<ibiblio name="sdm" root="http://simple-dm.googlecode.com/svn/repository/" m2compatible="true" />
}}}

= Launch the sample application module =  

Go to the directory where you unzipped the SDM distribution.
Launch the following java command:
{{{
java -jar sdm-core-0.1.jar
}}}

When prompting, type:
{{{
start org.sdm:testapp:0.1
}}}
The command will automatically resolve and download all module dependencies, then start the testapp module main method.

To see all loaded modules, type the *list* command:
{{{
list
org.sdm:testapp:0.1
org.sdm:cxf:0.1
org.sdm:http:0.1
org.codehaus.groovy:groovy-all:1.7.2
org.mortbay.jetty:jetty:6.1.21
org.mortbay.jetty:jetty-util:6.1.21
org.apache.geronimo.specs:geronimo-servlet_2.5_spec:1.2
org.sdm:core:0.1
org.springframework:spring-context:2.5.6
org.springframework:spring-beans:2.5.6
org.springframework:spring-core:2.5.6
commons-logging:commons-logging:1.1.1
commons-logging:commons-logging-api:1.1
org.apache.cxf:cxf-rt-core:2.2.6
org.apache.cxf:cxf-common-utilities:2.2.6
org.apache.cxf:cxf-api:2.2.6
org.apache.cxf:cxf-rt-frontend-jaxrs:2.2.6
javax.ws.rs:jsr311-api:1.0
org.codehaus.woodstox:wstx-asl:3.2.9
org.apache.camel:camel-cxf:2.2.0
org.apache.cxf:cxf-rt-bindings-xml:2.2.6
org.apache.cxf:cxf-rt-transports-http:2.2.6
org.apache.cxf:cxf-rt-frontend-jaxws:2.2.6
org.apache.cxf:cxf-rt-bindings-soap:2.2.6
org.apache.cxf:cxf-rt-ws-addr:2.2.6
org.apache.cxf:cxf-rt-transports-http-jetty:2.2.6
wsdl4j:wsdl4j:1.6.2
com.sun.xml.bind:jaxb-impl:2.1.12
xml-resolver:xml-resolver:1.2
org.apache.neethi:neethi:2.0.4
org.mortbay.jetty:jetty:6.1.22
org.apache.camel:camel-spring:2.2.0
org.apache.camel:camel-core:2.2.0
org.fusesource.commonman:commons-management:1.0
org.springframework:spring-aop:2.5.6
org.apache.camel:camel-http:2.2.0
org.apache.geronimo.specs:geronimo-servlet_2.4_spec:1.1.1
commons-httpclient:commons-httpclient:3.1
org.apache.cxf:cxf-rt-frontend-simple:2.2.6
}}}

The *testapp* module simply exposes a hello world application service using apache camel, cxf and jetty http technical services.

To test it just type this URL in your browser:
{{{
http://localhost:8088/services/helloworld
}}}

= Override Jetty servlet api dependency =
There is a slight difficulty here with the servlet api 2.5 module required by jetty that we need to solve.

Jetty comes with its own packaging of the servlet api in the following maven artifact:
{{{
org.mortbay.jetty:servlet-api:2.5-20081211
}}}

CXF, on the other hand, depends exactly on the same classes, but packaged in another artifact:
{{{
org.apache.geronimo.specs:geronimo-servlet_2.5_spec:1.2
}}}
So in SDM, the same servlet-api classes will be loaded in two different module classloaders, one for each dependency module.

The issue raises when CXF tries to register a servlet to the Jetty server. Because of the problem explained above, a Linkage exception is thrown.

In future releases of SDM, a alias system will be implemented to prevent such problem, when the same class is packaged in multiple artifacts. But for now, we need to override the jetty dependency.

Edit the *~/.groovy/grapes/org.mortbay.jetty/jetty/ivy-6.1.21.xml* file (launch the testapp demo to download it if the file doesn't exist).

Replace the jetty servlet api dependency with the geronimo one like this:
{{{
<dependencies>
	<dependency org="junit" name="junit" rev="3.8.2" force="true" conf="test->runtime(*),master(*)"/>
	<dependency org="org.mortbay.jetty" name="jetty-util" rev="6.1.21" force="true" conf="compile->compile(*),master(*);runtime->runtime(*)"/>
	<dependency org="org.apache.geronimo.specs" name="geronimo-servlet_2.5_spec" rev="1.2" force="true" conf="compile->compile(*),master(*);runtime->runtime(*)"/>
	<override org="geronimo-spec" module="geronimo-spec-jta" matcher="exact" rev="1.0.1B-rc4"/>
	<override org="org.slf4j" module="jcl104-over-slf4j" matcher="exact" rev="1.3.1"/>
	<override org="org.apache.maven" module="maven-plugin-tools-api" matcher="exact" rev="2.0"/>
	<override org="javax.activation" module="activation" matcher="exact" rev="1.1"/>
	<override org="org.slf4j" module="slf4j-simple" matcher="exact" rev="1.3.1"/>
	<override org="org.slf4j" module="slf4j-api" matcher="exact" rev="1.3.1"/>
	<override org="ant" module="ant" matcher="exact" rev="1.6.5"/>
	<override org="junit" module="junit" matcher="exact" rev="3.8.2"/>
	<override org="javax.mail" module="mail" matcher="exact" rev="1.4"/>
</dependencies>
}}}

The *testapp* application module should now run without any problems.